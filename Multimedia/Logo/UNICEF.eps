%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 12.0.0%%For: (\\u2022\\u2022\\u2022 \\u2022\\u2022\\u2022\\u2022\\u2022) ()%%Title: (UNICEF black.eps)%%CreationDate: 7/17/07 11:39 AM%%BoundingBox: 31 48 815 505%%HiResBoundingBox: 31.9553 48.6206 814.5 504.1533%%DocumentProcessColors: Cyan Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKCustomColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 421 298 421 298%AI3_TileBox: -174.5 -122.5 1016.5 719.5%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 842 595%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 300%AI5_NumLayers: 3%AI8_OpenToView: -77 692 1 1140 791 26 0 0 6 42 0 0%AI5_OpenViewLayers: 777%%PageOrigin:30 31%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MP%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 1 k(New Color Swatch 1)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 0 0 0 1 0 79 128 255 0 100 Lb(Background) Ln0 ALB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Guides) Ln0 ALB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Foreground) Ln0 Au300 Ar0 O0 0 0 1 k0 J 0 j 1 w 4 M []0 d0 XR31.9553 288.125 m814.5 288.125 L814.5 48.6206 L31.9553 48.6206 L31.9553 288.125 L31.9553 288.125 Lf1 0 0 0 k3.86371 M423.2275 168.373 mFU*u0 0 0 1 k4 M661.457 500.0957 m657.8818 499.519 654.4106 498.6279 651.0713 497.4517 C651.7402 496.7217 652.4595 496.0283 653.2236 495.376 C655.8428 497.1377 658.5933 498.7168 661.457 500.0957 Cf1 D720.5488 475.3418 m717.5068 479.5986 713.937 483.4463 709.9365 486.7876 C707.9702 485.083 705.8652 483.5073 703.6382 482.0752 C706.645 478.3838 709.2686 474.3633 711.4482 470.0747 C714.6157 471.6563 717.6553 473.417 720.5488 475.3418 Cf707.647 488.6089 m703.5039 491.7451 698.9517 494.3608 694.085 496.3594 C693.2866 495.4102 692.4175 494.5122 691.4844 493.6724 C695.2256 490.9082 698.6689 487.7598 701.7583 484.2842 C703.8379 485.6001 705.8057 487.0464 707.647 488.6089 Cf691.2212 497.4517 m687.8818 498.6279 684.4106 499.519 680.8354 500.0957 C683.6992 498.7168 686.4492 497.1377 689.0688 495.376 C689.833 496.0283 690.5522 496.7217 691.2212 497.4517 Cf0 D671.1465 504.1533 m706.5801 504.1533 735.2808 475.1973 735.2808 439.5054 c735.2808 403.814 706.5801 374.8579 671.1465 374.8579 c635.7129 374.8579 607.0117 403.814 607.0117 439.5054 c607.0117 475.1973 635.7129 504.1533 671.1465 504.1533 cf1 D681.835 491.0142 m683.5435 491.7041 685.1519 492.5537 686.6357 493.5405 C683.2451 495.7441 679.6338 497.6328 675.8423 499.1636 C677.9805 496.562 679.9814 493.8418 681.835 491.0142 Cf672.583 489.001 m674.8203 489.1099 676.9795 489.4712 679.0264 490.0522 C677.0439 493.0249 674.8911 495.8726 672.583 498.5815 C672.583 489.001 Lf680.6445 487.5381 m678.0981 486.7368 675.3911 486.2495 672.583 486.125 C672.583 475.6152 L677.2441 475.7266 681.7534 476.3745 686.0366 477.4917 C684.4448 480.9648 682.6421 484.3193 680.6445 487.5381 Cf689.1714 491.8037 m687.4043 490.5234 685.4668 489.4287 683.3955 488.5508 C685.4072 485.2622 687.2236 481.8384 688.8276 478.2959 C692.5039 479.457 695.9922 480.9692 699.2422 482.7866 C696.2129 486.1362 692.8369 489.1611 689.1714 491.8037 Cf660.4575 491.0142 m662.311 493.8418 664.312 496.562 666.4502 499.1636 C662.6587 497.6328 659.0479 495.7446 655.6572 493.5405 C657.1406 492.5537 658.749 491.7041 660.4575 491.0142 Cf669.7095 498.5815 m667.4014 495.8726 665.249 493.0249 663.2661 490.0522 C665.313 489.4712 667.4727 489.1099 669.7095 489.001 C669.7095 498.5815 Lf635.166 390.001 m636.5776 389.4731 638.5938 388.8633 641.0801 389.019 c644.3638 389.2241 648.6738 390.8662 652.7783 392.4053 c656.8828 393.9443 667.6572 396.5098 670.2227 397.0229 c672.7881 397.5361 673.4038 398.6646 674.0195 399.7935 c674.6353 400.9224 674.2246 402.564 673.917 404.5137 c673.6089 406.4634 673.0962 409.542 672.9932 412.415 c672.8906 415.2886 672.7881 417.854 668.2729 420.7271 c663.7578 423.6001 660.8848 426.9868 661.1924 429.5522 c661.5005 432.1172 664.4761 434.2725 Y663.7578 436.4272 664.0659 437.3506 v664.3735 438.2744 667.1445 437.9663 Y666.7339 441.0449 666.939 441.8657 v667.1445 442.6865 668.5811 442.2764 Y669.915 443.0972 L668.8887 445.252 668.4785 446.6885 v668.0679 448.1255 668.8887 449.2539 670.5308 449.2539 c672.1724 449.2539 674.2246 449.4595 679.1504 450.5879 c684.0757 451.7168 686.231 461.1577 697.8262 463.0044 c709.4219 464.8516 718.4521 456.0269 Y736.9229 438.6846 724.8145 419.085 v714.3057 402.0762 700.9048 406.3608 Y698.5444 405.2319 699.6733 400.3066 v700.8022 395.3809 707.8828 391.2764 Y708.4526 391.0103 L722.7964 402.2388 732.0229 419.7896 732.0229 439.5054 c732.0229 451.8379 728.3843 463.3452 722.1704 472.9658 C719.1592 470.9609 715.9902 469.1294 712.6948 467.4858 C713.5581 465.5903 714.3364 463.6475 715.0249 461.6621 C713.8232 462.3677 712.5615 462.9951 711.2612 463.5327 C710.895 464.4473 710.5088 465.3516 710.103 466.2446 C709.1001 465.7842 708.0854 465.3408 707.0605 464.915 C705.0693 465.4072 703.0425 465.6802 701.0464 465.6982 C703.7197 466.626 706.3257 467.6738 708.8555 468.834 C706.7144 473.0361 704.1274 476.9692 701.1577 480.5693 C697.6738 478.5737 693.9282 476.9165 689.9785 475.647 C691.4648 472.0762 692.7383 468.3931 693.7827 464.6138 C692.7827 464.3115 691.8901 463.9668 691.0845 463.5898 C690.0308 467.4453 688.7319 471.1978 687.2061 474.8296 C682.5547 473.5781 677.6509 472.8564 672.583 472.7412 C672.583 460.6904 L678.2153 460.7891 683.71 461.3877 689.0137 462.4385 C687.3301 461.3379 686.0923 460.0811 684.9663 458.8247 C680.9253 458.23 676.7905 457.8872 672.583 457.8159 C672.583 453.6665 L671.9399 453.6216 671.2573 453.5986 670.5308 453.5986 c670.2417 453.5986 669.9683 453.5825 669.7095 453.5522 C669.7095 472.7412 L667.4404 472.793 665.2036 472.9663 663.0078 473.2539 C662.3345 474.3843 661.5439 475.4805 660.6548 476.5259 C663.5918 475.999 666.6177 475.689 669.7095 475.6152 C669.7095 486.125 L666.9014 486.2495 664.1943 486.7368 661.6479 487.5381 C660.0962 485.0371 658.6621 482.4551 657.3525 479.7988 C656.6113 480.4224 655.833 481.0142 655.0239 481.5688 C656.2188 483.9565 657.5117 486.2856 658.8975 488.5508 C656.8262 489.4287 654.8882 490.5234 653.1211 491.8037 C650.5698 489.9644 648.1587 487.9395 645.9067 485.749 C644.7764 486.0381 643.6299 486.2505 642.4771 486.3784 C645.0469 489.0337 647.8335 491.4746 650.8081 493.6724 C649.8755 494.5122 649.0059 495.4102 648.2075 496.3599 C643.3408 494.3608 638.7886 491.7451 634.6455 488.6089 c620.4404 477.856 611.0381 460.9839 610.3145 441.8833 C610.6875 442.2227 616.4404 447.4272 619.1201 448.0225 c621.8911 448.6382 624.0459 453.4614 624.0459 454.2822 c624.0459 455.103 618.8091 467.8569 625.1748 476.3447 c630.7158 483.7329 639.2329 487.5298 652.6758 480.0386 c666.1182 472.5479 663.5527 461.7734 660.9873 458.2842 c658.4219 454.7954 657.2935 453.6665 657.7036 452.0249 c658.1143 450.3828 659.3457 449.1514 658.8325 448.3306 c658.3193 447.5098 655.7539 447.2017 Y656.3696 445.457 656.2671 444.8418 v656.1646 444.2261 654.728 444.3286 Y655.0356 443.3022 654.8306 442.584 v654.6255 441.8657 652.2651 442.2764 Y652.7783 437.8638 646.9292 438.582 v641.0801 439.3003 639.8486 441.1475 638.104 439.8135 c636.3599 438.4795 636.6675 436.7349 637.8989 431.6045 c639.1304 426.4736 639.6436 414.8779 Y643.1836 412.3638 L648.5713 412.1074 649.8535 412.0049 v651.1362 411.9023 652.5732 411.543 653.394 411.4917 c654.2148 411.4404 657.6011 414.1084 659.397 414.5186 c661.1924 414.9292 661.7568 414.416 661.7568 413.9546 c661.7568 413.4927 661.2441 412.21 Y664.1172 413.2876 665.1436 413.0308 v666.1694 412.7744 666.7339 411.6968 665.9644 408.0029 c665.1943 404.3086 663.604 401.9482 660.3716 401.5894 c657.1392 401.23 654.9844 402.7695 652.6758 402.7178 c650.3667 402.6665 643.543 399.4858 638.0527 399.9473 c632.563 400.4092 631.1265 402.7178 Y629.228 399.229 628.9712 397.8438 v628.7983 396.9087 628.9292 395.8101 629.0322 395.1943 C630.96 393.332 633.0088 391.5967 635.166 390.001 Cf*U*u0 D640.4644 369.522 m637.0781 368.9063 628.7148 369.9326 623.7896 375.9355 c619.5972 381.0449 617.2222 393.3286 617.8892 393.8418 c618.5562 394.355 624.8154 389.3779 631.2803 383.4775 c637.7451 377.5771 643.8506 370.1377 640.4644 369.522 cf625.2773 368.4956 m624.7642 367.7773 615.7646 365.2114 606.0884 370.856 c596.2373 376.6025 591.4541 387.291 591.6191 387.7876 c591.9272 388.7109 598.4946 387.1719 610.9111 380.1938 c623.3276 373.2163 625.9956 369.2139 625.2773 368.4956 Cf616.8628 380.707 m616.1445 380.3994 607.3193 384.709 604.7544 395.689 c602.189 406.6689 605.5537 414.2617 606.2935 414.5703 c607.5249 415.083 611.4243 408.6182 614.2974 398.6646 c617.1709 388.7109 617.9917 381.0146 616.8628 380.707 Cf605.7803 385.376 m604.7031 385.0171 595.1084 389.019 588.1816 397.3818 c582.2783 404.5098 579.5107 416.3145 580.0752 416.6738 c580.6396 417.0327 588.6948 410.0552 595.2622 402.6152 c601.8296 395.1758 606.8579 385.7354 605.7803 385.376 cf599.6748 401.3325 m598.2383 401.6406 594.084 406.374 594.6465 418.1104 c595.0059 425.6011 600.8618 435.1826 601.9321 435.1445 c603.3691 435.0933 604.0347 428.1465 603.4199 419.0337 c602.8047 409.9009 601.1113 401.0249 599.6748 401.3325 cf577.7666 445.3545 m578.8438 446.1758 583.8208 437.6587 586.9502 430.5781 c589.6064 424.5698 593.0049 411.6455 591.6191 411.1836 c590.7417 410.8911 583.6152 415.3398 579.6133 426.1143 c576.3892 434.7954 577.2114 444.9316 577.7666 445.3545 cf601.8296 454.2822 m602.8047 454.0259 602.394 446.2783 599.4697 438.1714 c596.5449 430.0649 592.543 422.8818 591.6709 423.395 c590.7983 423.9082 589.1567 433.5024 591.9272 440.7881 c594.6978 448.0742 600.855 454.5386 601.8296 454.2822 cf591.5166 447.8687 m590.7471 448.8438 590.3613 457.5415 596.1855 464.9541 c601.8296 472.1372 606.7554 474.395 607.6787 473.9331 c608.6025 473.4712 605.5239 465.2622 601.7271 459.4644 c597.8994 453.6191 592.1528 447.0635 591.5166 447.8687 cf589.8237 462.3374 m588.5098 462.9946 588.6128 469.688 591.9272 476.5498 c594.8516 482.604 601.1626 488.4531 602.2402 488.0425 c603.3174 487.6323 601.0317 478.9424 598.5972 473.4199 c596.4937 468.6484 590.9521 461.7734 589.8237 462.3374 cf584.5391 472.2397 m585.5649 472.4453 588.2329 464.8516 588.7461 454.5898 c589.2593 444.3286 588.2329 436.3247 587.5146 436.3247 c586.7964 436.3247 581.5117 440.7368 581.2041 451.6143 c580.896 462.4917 583.5127 472.0347 584.5391 472.2397 cf691.2588 340.2764 m689.7197 339.7637 689.2065 346.4336 676.3799 355.1558 c674.335 356.5459 672.4258 357.7095 670.6636 358.6831 C669.1753 357.8276 667.5898 356.8398 665.9131 355.6997 c653.0859 346.9775 652.5732 340.3076 651.0337 340.8208 c649.4946 341.3335 647.0317 344.1045 Y655.7852 354.8774 666.2788 360.874 V660.1445 363.6025 656.6777 363.6729 Y652.2412 356.2861 638.5146 357.1055 v624.7642 357.9263 617.4785 361.0049 615.2212 362.5439 c614.6782 362.9141 612.3477 365.3145 629.7925 366.9565 c646.1733 368.498 659.1157 367.5063 670.4893 362.9619 C682.1797 367.9697 695.4854 369.1021 712.5005 367.5005 c729.9448 365.8589 727.6147 363.4585 727.0718 363.0879 c724.8145 361.5488 717.5283 358.4702 703.7778 357.6494 c690.0518 356.8301 685.6152 364.2168 Y681.7412 364.1382 674.938 360.9243 V685.9023 355.0786 695.2612 343.5605 Y692.7983 340.7896 691.2588 340.2764 vf701.8281 370.0659 m698.4419 370.6816 704.5479 378.1211 711.0122 384.0215 c717.4771 389.9219 723.7368 394.8989 724.4038 394.3857 c725.0708 393.8726 722.6953 381.5889 718.5034 376.4795 c713.5776 370.4766 705.2148 369.4502 701.8281 370.0659 cf717.0156 369.04 m716.2969 369.7583 718.9648 373.7603 731.3818 380.7378 c743.7979 387.7158 750.3652 389.2549 750.6733 388.3315 c750.8389 387.835 746.0557 377.1465 736.2046 371.3999 c726.5278 365.7554 717.5283 368.3213 717.0156 369.04 Cf725.4297 381.251 m724.3013 381.5591 725.1221 389.2549 727.9951 399.2085 c730.8687 409.1626 734.7681 415.627 735.999 415.1143 c736.7393 414.8057 740.104 407.2129 737.5386 396.2329 c734.9731 385.2529 726.1484 380.9434 725.4297 381.251 Cf736.5122 385.9199 m735.4351 386.2793 740.4629 395.7197 747.0303 403.1592 c753.5977 410.5991 761.6533 417.5771 762.2173 417.2178 c762.7817 416.8584 760.0142 405.0537 754.1108 397.9258 c747.1841 389.563 737.5898 385.561 736.5122 385.9199 cf742.6177 401.8765 m741.1812 401.5688 739.4883 410.4453 738.8726 419.5781 c738.2578 428.6904 738.9238 435.6372 740.3604 435.6885 c741.4312 435.7266 747.2871 426.145 747.646 418.6543 c748.209 406.918 744.0547 402.1846 742.6177 401.8765 cf764.5264 445.8984 m765.0811 445.4756 765.9038 435.3398 762.6792 426.6582 c758.6772 415.8838 751.5508 411.4355 750.6733 411.7275 c749.2881 412.1895 752.6865 425.1138 755.3423 431.1221 c758.4722 438.2026 763.4487 446.7197 764.5264 445.8984 cf740.4629 454.8262 m741.438 455.083 747.5947 448.6182 750.3652 441.332 c753.1362 434.0464 751.4941 424.4521 750.6221 423.939 c749.7495 423.4258 745.7476 430.6089 742.8232 438.7158 c739.8984 446.8223 739.4883 454.5698 740.4629 454.8262 cf750.7759 448.4126 m750.1401 447.6074 744.3936 454.1631 740.5654 460.0083 c736.769 465.8062 733.6904 474.0151 734.6138 474.4771 c735.5376 474.939 740.4629 472.6812 746.1069 465.498 c751.9312 458.0854 751.5454 449.3877 750.7759 448.4126 cf752.4692 462.8813 m751.3403 462.3174 745.7988 469.1924 743.6953 473.9639 c741.2607 479.4863 738.9751 488.1763 740.0527 488.5869 c741.1299 488.9971 747.4409 483.1479 750.3652 477.0938 c753.6802 470.2319 753.7832 463.5386 752.4692 462.8813 cf757.7539 472.7837 m758.7798 472.5786 761.3965 463.0356 761.0889 452.1582 c760.7808 441.2813 755.4961 436.8687 754.7778 436.8687 c754.0596 436.8687 753.0332 444.8726 753.5464 455.1343 c754.0596 465.3955 756.7275 472.9893 757.7539 472.7837 cf*U1 O1 XR148.4539 407.2056 m148.4539 404.8525 148.2566 393.2949 144.7317 384.0869 c140.8125 373.8984 130.4294 369.979 122.7878 369.979 c104.9578 369.979 101.0383 382.5171 101.0383 399.564 C101.0383 457.7544 L82.425 457.7544 L82.425 391.9229 L82.425 372.1343 94.1802 356.46 114.7549 356.46 c128.4683 356.46 141.0098 361.5542 148.4539 373.8984 C148.8455 373.8984 L148.8455 359.3984 L167.0674 359.3984 L167.0674 457.7544 L148.4539 457.7544 L148.4539 407.2056 Lf202.5493 457.7544 m184.3276 457.7544 L184.3276 359.3984 L202.9409 359.3984 L202.9409 412.8857 L202.9409 432.0884 208.0352 436.3994 210.7798 439.1406 c218.6157 446.9795 228.8042 446.3906 Y244.479 446.3906 251.3369 437.5742 251.3369 421.3105 C251.3369 359.3984 L269.9473 359.3984 L269.9473 427.3857 L269.9473 458.9292 239.5791 460.6929 232.7236 460.6929 c222.9268 460.6929 209.2104 455.5986 202.9409 443.2544 C202.5493 443.2544 L202.5493 457.7544 Lf*u304.0039 359.3984 m304.0039 457.7544 L285.3906 457.7544 L285.3906 359.3984 L304.0039 359.3984 Lf1 D283.6265 480.6787 m305.7676 480.6787 L305.7676 500.8589 L283.6265 500.8589 L283.6265 480.6787 Lf*U0 D398.8359 426.2109 m397.8555 447.5654 382.1836 460.6929 361.4146 460.6929 c330.2627 460.6929 315.7632 436.5938 315.7632 407.7915 c315.7632 378.7954 328.3018 356.46 359.8481 356.46 c381.5947 356.46 398.0527 369.979 399.6191 392.1201 C381.0059 392.1201 L380.0283 378.0122 372.3867 369.979 360.0425 369.979 c342.2124 369.979 335.3574 385.4561 335.3574 408.5781 c335.3574 431.6968 342.2124 447.1738 360.0425 447.1738 c373.3643 447.1738 379.2451 438.5547 380.2227 426.2109 C398.8359 426.2109 Lf*u494.6406 405.0503 m494.6406 414.2583 L494.6406 441.4937 480.73 460.1069 451.3389 460.6929 c420.187 460.6929 405.6875 436.5938 405.6875 407.7915 c405.6875 378.7954 418.229 356.46 449.7725 356.46 c473.2827 356.46 490.5239 367.6289 493.4629 389.9644 C473.8716 389.9644 L471.7163 375.6592 464.4663 369.979 449.9668 369.979 c430.9614 369.979 423.9092 387.8091 425.2813 405.0503 C494.6406 405.0503 Lf425.2813 417.9805 m425.2813 434.0464 434.4893 447.1738 449.9668 447.1738 c467.9941 447.1738 475.438 434.438 475.0464 417.9805 C425.2813 417.9805 Lf*U532.2852 359.3984 m532.2852 444.8242 L555.0122 444.8242 L555.0122 457.7544 L532.2852 457.7544 L532.2852 473.4287 L531.6963 484.2036 537.771 486.9482 548.3511 486.9482 c551.4873 486.9482 554.6206 486.5562 557.7568 486.3589 C557.7568 501.8394 L553.248 502.6226 548.9404 503.7974 544.4316 503.7974 c530.521 503.7974 514.2607 498.1143 513.6714 476.5649 C513.6714 457.7544 L494.4722 457.7544 L494.4722 444.8242 L513.6714 444.8242 L513.6714 359.3984 L532.2852 359.3984 Lf*u0 O0 0 0 0 k3.86371 M0 XR661.457 238.0957 m657.8818 237.519 654.4106 236.6279 651.0713 235.4517 C651.7402 234.7217 652.4595 234.0283 653.2236 233.376 C655.8428 235.1377 658.5933 236.7168 661.457 238.0957 Cf1 D720.5488 213.3418 m717.5068 217.5986 713.937 221.4463 709.9365 224.7876 C707.9702 223.083 705.8652 221.5073 703.6382 220.0752 C706.645 216.3838 709.2686 212.3633 711.4482 208.0747 C714.6157 209.6563 717.6553 211.417 720.5488 213.3418 Cf707.647 226.6089 m703.5039 229.7451 698.9517 232.3608 694.085 234.3594 C693.2866 233.4102 692.4175 232.5122 691.4844 231.6724 C695.2256 228.9082 698.6689 225.7598 701.7583 222.2842 C703.8379 223.6001 705.8057 225.0464 707.647 226.6089 Cf691.2212 235.4517 m687.8818 236.6279 684.4106 237.519 680.8354 238.0957 C683.6992 236.7168 686.4492 235.1377 689.0688 233.376 C689.833 234.0283 690.5522 234.7217 691.2212 235.4517 Cf0 D671.1465 242.1533 m706.5801 242.1533 735.2808 213.1973 735.2808 177.5054 c735.2808 141.814 706.5801 112.8579 671.1465 112.8579 c635.7129 112.8579 607.0117 141.814 607.0117 177.5054 c607.0117 213.1973 635.7129 242.1533 671.1465 242.1533 cf1 D681.835 229.0142 m683.5435 229.7041 685.1519 230.5537 686.6357 231.5405 C683.2451 233.7446 679.6338 235.6328 675.8423 237.1636 C677.9805 234.562 679.9814 231.8418 681.835 229.0142 Cf672.583 227.001 m674.8203 227.1099 676.9795 227.4712 679.0264 228.0522 C677.0439 231.0249 674.8911 233.8726 672.583 236.5815 C672.583 227.001 Lf680.6445 225.5381 m678.0981 224.7368 675.3911 224.2495 672.583 224.125 C672.583 213.6152 L677.2441 213.7266 681.7534 214.3745 686.0366 215.4917 C684.4448 218.9648 682.6421 222.3193 680.6445 225.5381 Cf689.1714 229.8037 m687.4043 228.5234 685.4668 227.4287 683.3955 226.5508 C685.4072 223.2622 687.2236 219.8384 688.8276 216.2959 C692.5039 217.457 695.9922 218.9692 699.2422 220.7866 C696.2129 224.1362 692.8369 227.1611 689.1714 229.8037 Cf660.4575 229.0142 m662.311 231.8418 664.312 234.562 666.4502 237.1636 C662.6587 235.6328 659.0479 233.7446 655.6572 231.5405 C657.1406 230.5537 658.749 229.7041 660.4575 229.0142 Cf669.7095 236.5815 m667.4014 233.8726 665.249 231.0249 663.2661 228.0522 C665.313 227.4712 667.4727 227.1099 669.7095 227.001 C669.7095 236.5815 Lf635.166 128.001 m636.5776 127.4731 638.5938 126.8633 641.0801 127.019 c644.3638 127.2241 648.6738 128.8662 652.7783 130.4053 c656.8828 131.9443 667.6572 134.5098 670.2227 135.0229 c672.7881 135.5361 673.4038 136.6646 674.0195 137.7935 c674.6353 138.9224 674.2246 140.564 673.917 142.5137 c673.6089 144.4634 673.0962 147.542 672.9932 150.415 c672.8906 153.2886 672.7881 155.854 668.2729 158.7271 c663.7578 161.6001 660.8848 164.9868 661.1924 167.5518 c661.5005 170.1172 664.4761 172.2725 Y663.7578 174.4272 664.0659 175.3506 v664.3735 176.2744 667.1445 175.9663 Y666.7339 179.0449 666.939 179.8657 v667.1445 180.6865 668.5811 180.2764 Y669.915 181.0972 L668.8887 183.252 668.4785 184.6885 v668.0679 186.1255 668.8887 187.2539 670.5308 187.2539 c672.1724 187.2539 674.2246 187.4595 679.1504 188.5879 c684.0757 189.7168 686.231 199.1577 697.8262 201.0044 c709.4219 202.8516 718.4521 194.0269 Y736.9229 176.6846 724.8145 157.085 v714.3057 140.0762 700.9048 144.3608 Y698.5444 143.2319 699.6733 138.3066 v700.8022 133.3809 707.8828 129.2764 Y708.4526 129.0103 L722.7964 140.2388 732.0229 157.7896 732.0229 177.5054 c732.0229 189.8379 728.3843 201.3452 722.1704 210.9658 C719.1592 208.9614 715.9902 207.1294 712.6948 205.4858 C713.5581 203.5903 714.3364 201.6475 715.0249 199.6621 C713.8232 200.3677 712.5615 200.9951 711.2612 201.5327 C710.895 202.4473 710.5088 203.3516 710.103 204.2446 C709.1001 203.7842 708.0854 203.3408 707.0605 202.915 C705.0693 203.4072 703.0425 203.6802 701.0464 203.6982 C703.7197 204.626 706.3257 205.6738 708.8555 206.834 C706.7144 211.0361 704.1274 214.9692 701.1577 218.5693 C697.6738 216.5737 693.9282 214.9165 689.9785 213.647 C691.4648 210.0762 692.7383 206.3931 693.7827 202.6138 C692.7827 202.3115 691.8901 201.9668 691.0845 201.5898 C690.0308 205.4453 688.7319 209.1978 687.2061 212.8296 C682.5547 211.5781 677.6509 210.8564 672.583 210.7412 C672.583 198.6904 L678.2153 198.7891 683.71 199.3877 689.0137 200.4385 C687.3301 199.3379 686.0923 198.0811 684.9663 196.8247 C680.9253 196.23 676.7905 195.8872 672.583 195.8159 C672.583 191.6665 L671.9399 191.6216 671.2573 191.5986 670.5308 191.5986 c670.2417 191.5986 669.9683 191.5825 669.7095 191.5518 C669.7095 210.7412 L667.4404 210.793 665.2036 210.9663 663.0078 211.2539 C662.3345 212.3843 661.5439 213.4805 660.6548 214.5259 C663.5918 213.999 666.6177 213.689 669.7095 213.6152 C669.7095 224.125 L666.9014 224.2495 664.1943 224.7368 661.6479 225.5381 C660.0962 223.0371 658.6621 220.4551 657.3525 217.7988 C656.6113 218.4224 655.833 219.0142 655.0239 219.5688 C656.2188 221.9565 657.5117 224.2856 658.8975 226.5508 C656.8262 227.4287 654.8882 228.5234 653.1211 229.8037 C650.5698 227.9644 648.1587 225.9395 645.9067 223.749 C644.7764 224.0381 643.6299 224.2505 642.4771 224.3784 C645.0469 227.0337 647.8335 229.4746 650.8081 231.6724 C649.8755 232.5122 649.0059 233.4102 648.2075 234.3599 C643.3408 232.3608 638.7886 229.7451 634.6455 226.6089 c620.4404 215.856 611.0381 198.9839 610.3145 179.8833 C610.6875 180.2227 616.4404 185.4272 619.1201 186.0225 c621.8911 186.6382 624.0459 191.4614 624.0459 192.2822 c624.0459 193.103 618.8091 205.8569 625.1748 214.3447 c630.7158 221.7329 639.2329 225.5298 652.6758 218.0386 c666.1182 210.5479 663.5527 199.7734 660.9873 196.2842 c658.4219 192.7954 657.2935 191.6665 657.7036 190.0249 c658.1143 188.3828 659.3457 187.1514 658.8325 186.3306 c658.3193 185.5098 655.7539 185.2017 Y656.3696 183.4575 656.2671 182.8418 v656.1646 182.2261 654.728 182.3286 Y655.0356 181.3022 654.8306 180.584 v654.6255 179.8657 652.2651 180.2764 Y652.7783 175.8638 646.9292 176.582 v641.0801 177.3003 639.8486 179.1475 638.104 177.8135 c636.3599 176.4795 636.6675 174.7349 637.8989 169.6045 c639.1304 164.4736 639.6436 152.8779 Y643.1836 150.3638 L648.5713 150.1074 649.8535 150.0049 v651.1362 149.9023 652.5732 149.543 653.394 149.4917 c654.2148 149.4404 657.6011 152.1084 659.397 152.5186 c661.1924 152.9292 661.7568 152.416 661.7568 151.9546 c661.7568 151.4927 661.2441 150.21 Y664.1172 151.2876 665.1436 151.0308 v666.1694 150.7744 666.7339 149.6968 665.9644 146.0029 c665.1943 142.3086 663.604 139.9482 660.3716 139.5894 c657.1392 139.23 654.9844 140.7695 652.6758 140.7178 c650.3667 140.6665 643.543 137.4858 638.0527 137.9473 c632.563 138.4092 631.1265 140.7178 Y629.228 137.229 628.9712 135.8438 v628.7983 134.9087 628.9292 133.8101 629.0322 133.1943 C630.96 131.3325 633.0088 129.5967 635.166 128.001 Cf*U*u0 D640.4644 107.522 m637.0781 106.9063 628.7148 107.9326 623.7896 113.9355 c619.5972 119.0449 617.2222 131.3286 617.8892 131.8418 c618.5562 132.355 624.8154 127.3779 631.2803 121.4775 c637.7451 115.5771 643.8506 108.1377 640.4644 107.522 cf625.2773 106.4956 m624.7642 105.7773 615.7646 103.2114 606.0884 108.856 c596.2373 114.6025 591.4541 125.291 591.6191 125.7876 c591.9272 126.7109 598.4946 125.1719 610.9111 118.1938 c623.3276 111.2163 625.9956 107.2139 625.2773 106.4956 Cf616.8628 118.707 m616.1445 118.3994 607.3193 122.709 604.7544 133.689 c602.189 144.6689 605.5537 152.2617 606.2935 152.5703 c607.5249 153.083 611.4243 146.6182 614.2974 136.6646 c617.1709 126.7109 617.9917 119.0151 616.8628 118.707 Cf605.7803 123.376 m604.7031 123.0171 595.1084 127.019 588.1816 135.3818 c582.2783 142.5098 579.5107 154.3145 580.0752 154.6738 c580.6396 155.0327 588.6948 148.0552 595.2622 140.6152 c601.8296 133.1758 606.8579 123.7354 605.7803 123.376 cf599.6748 139.3325 m598.2383 139.6406 594.084 144.374 594.6465 156.1104 c595.0059 163.6011 600.8618 173.1826 601.9321 173.1445 c603.3691 173.0933 604.0347 166.1465 603.4199 157.0337 c602.8047 147.9009 601.1113 139.0249 599.6748 139.3325 cf577.7666 183.3545 m578.8438 184.1758 583.8208 175.6587 586.9502 168.5781 c589.6064 162.5698 593.0049 149.6455 591.6191 149.1836 c590.7417 148.8911 583.6152 153.3398 579.6133 164.1143 c576.3892 172.7954 577.2114 182.9316 577.7666 183.3545 cf601.8296 192.2822 m602.8047 192.0259 602.394 184.2783 599.4697 176.1714 c596.5449 168.0649 592.543 160.8818 591.6709 161.395 c590.7983 161.9082 589.1567 171.5024 591.9272 178.7881 c594.6978 186.0742 600.855 192.5386 601.8296 192.2822 cf591.5166 185.8687 m590.7471 186.8438 590.3613 195.5415 596.1855 202.9541 c601.8296 210.1372 606.7554 212.395 607.6787 211.9331 c608.6025 211.4712 605.5239 203.2622 601.7271 197.4644 c597.8994 191.6191 592.1528 185.0635 591.5166 185.8687 cf589.8237 200.3374 m588.5098 200.9946 588.6128 207.688 591.9272 214.5498 c594.8516 220.604 601.1626 226.4531 602.2402 226.0425 c603.3174 225.6323 601.0317 216.9424 598.5972 211.4199 c596.4937 206.6484 590.9521 199.7734 589.8237 200.3374 cf584.5391 210.2397 m585.5649 210.4453 588.2329 202.8516 588.7461 192.5898 c589.2593 182.3286 588.2329 174.3247 587.5146 174.3247 c586.7964 174.3247 581.5117 178.7368 581.2041 189.6143 c580.896 200.4917 583.5127 210.0347 584.5391 210.2397 cf691.2588 78.2764 m689.7197 77.7637 689.2065 84.4336 676.3799 93.1558 c674.335 94.5459 672.4258 95.7095 670.6636 96.6831 C669.1753 95.8276 667.5898 94.8403 665.9131 93.6997 c653.0859 84.9775 652.5732 78.3076 651.0337 78.8208 c649.4946 79.3335 647.0317 82.1045 Y655.7852 92.8774 666.2788 98.874 V660.1445 101.6025 656.6777 101.6729 Y652.2412 94.2861 638.5146 95.1055 v624.7642 95.9263 617.4785 99.0049 615.2212 100.5439 c614.6782 100.9141 612.3477 103.3145 629.7925 104.9565 c646.1733 106.4985 659.1157 105.5063 670.4893 100.9619 C682.1797 105.9697 695.4854 107.1021 712.5005 105.5005 c729.9448 103.8589 727.6147 101.4585 727.0718 101.0879 c724.8145 99.5488 717.5283 96.4702 703.7778 95.6494 c690.0518 94.8301 685.6152 102.2168 Y681.7412 102.1382 674.938 98.9243 V685.9023 93.0786 695.2612 81.5601 Y692.7983 78.7896 691.2588 78.2764 vf701.8281 108.0659 m698.4419 108.6816 704.5479 116.1211 711.0122 122.0215 c717.4771 127.9219 723.7368 132.8989 724.4038 132.3857 c725.0708 131.8726 722.6953 119.5889 718.5034 114.4795 c713.5776 108.4766 705.2148 107.4502 701.8281 108.0659 cf717.0156 107.04 m716.2969 107.7583 718.9648 111.7603 731.3818 118.7378 c743.7979 125.7158 750.3652 127.2549 750.6733 126.3315 c750.8389 125.835 746.0557 115.1465 736.2046 109.3999 c726.5278 103.7554 717.5283 106.3213 717.0156 107.04 Cf725.4297 119.251 m724.3013 119.5591 725.1221 127.2549 727.9951 137.2085 c730.8687 147.1626 734.7681 153.627 735.999 153.1143 c736.7393 152.8057 740.104 145.2129 737.5386 134.2329 c734.9731 123.2529 726.1484 118.9434 725.4297 119.251 Cf736.5122 123.9199 m735.4351 124.2793 740.4629 133.7197 747.0303 141.1592 c753.5977 148.5991 761.6533 155.5767 762.2173 155.2178 c762.7817 154.8584 760.0142 143.0537 754.1108 135.9258 c747.1841 127.563 737.5898 123.561 736.5122 123.9199 cf742.6177 139.8765 m741.1812 139.5688 739.4883 148.4453 738.8726 157.5781 c738.2578 166.6904 738.9238 173.6372 740.3604 173.6885 c741.4312 173.7266 747.2871 164.145 747.646 156.6543 c748.209 144.918 744.0547 140.1846 742.6177 139.8765 cf764.5264 183.8989 m765.0811 183.4756 765.9038 173.3398 762.6792 164.6582 c758.6772 153.8838 751.5508 149.4355 750.6733 149.728 c749.2881 150.1895 752.6865 163.1138 755.3423 169.1221 c758.4722 176.2026 763.4487 184.7197 764.5264 183.8989 cf740.4629 192.8262 m741.438 193.083 747.5947 186.6182 750.3652 179.3325 c753.1362 172.0464 751.4941 162.4521 750.6221 161.939 c749.7495 161.4258 745.7476 168.6089 742.8232 176.7158 c739.8984 184.8223 739.4883 192.5698 740.4629 192.8262 cf750.7759 186.4126 m750.1401 185.6074 744.3936 192.1631 740.5654 198.0083 c736.769 203.8062 733.6904 212.0151 734.6138 212.4771 c735.5376 212.939 740.4629 210.6812 746.1069 203.498 c751.9312 196.0854 751.5454 187.3877 750.7759 186.4126 cf752.4692 200.8813 m751.3403 200.3174 745.7988 207.1924 743.6953 211.9639 c741.2607 217.4863 738.9751 226.1763 740.0527 226.5869 c741.1299 226.9971 747.4409 221.1479 750.3652 215.0938 c753.6802 208.2319 753.7832 201.5386 752.4692 200.8813 cf757.7539 210.7837 m758.7798 210.5786 761.3965 201.0356 761.0889 190.1582 c760.7808 179.2813 755.4961 174.8687 754.7778 174.8687 c754.0596 174.8687 753.0332 182.8726 753.5464 193.1343 c754.0596 203.3955 756.7275 210.9893 757.7539 210.7837 cf*U*u1 O1 XR532.2852 97.3984 m532.2852 182.8242 L555.0122 182.8242 L555.0122 195.7544 L532.2852 195.7544 L532.2852 211.4287 L531.6963 222.2036 537.771 224.9482 548.3511 224.9482 c551.4873 224.9482 554.6206 224.5562 557.7568 224.3589 C557.7568 239.8394 L553.248 240.6226 548.9404 241.7974 544.4316 241.7974 c530.521 241.7974 514.2607 236.1143 513.6714 214.5649 C513.6714 195.7544 L494.4722 195.7544 L494.4722 182.8242 L513.6714 182.8242 L513.6714 97.3984 L532.2852 97.3984 Lf425.2813 155.9805 m425.2813 172.0464 434.4893 185.1738 449.9668 185.1738 c467.9941 185.1738 475.438 172.438 475.0464 155.9805 C425.2813 155.9805 lf1 D494.6406 143.0503 m494.6406 152.2583 l494.6406 179.4937 480.73 198.1069 451.3389 198.6929 C420.187 198.6929 405.6875 174.5938 405.6875 145.7915 c405.6875 116.7954 418.229 94.46 449.7725 94.46 c473.2827 94.46 490.5239 105.6289 493.4629 127.9644 C473.8716 127.9644 L471.7163 113.6592 464.4663 107.979 449.9668 107.979 c430.9614 107.979 423.9092 125.8091 425.2813 143.0503 C494.6406 143.0503 Lf398.8359 164.2109 m397.8555 185.5654 382.1836 198.6929 361.4146 198.6929 c330.2627 198.6929 315.7632 174.5938 315.7632 145.7915 c315.7632 116.7954 328.3018 94.46 359.8481 94.46 c381.5947 94.46 398.0527 107.979 399.6191 130.1201 C381.0059 130.1201 L380.0283 116.0122 372.3867 107.979 360.0425 107.979 c342.2124 107.979 335.3574 123.4561 335.3574 146.5781 c335.3574 169.6968 342.2124 185.1738 360.0425 185.1738 c373.3643 185.1738 379.2451 176.5547 380.2227 164.2109 C398.8359 164.2109 Lf283.6265 218.6787 m305.7676 218.6787 L305.7676 238.8589 L283.6265 238.8589 L283.6265 218.6787 Lf304.0039 97.3984 m304.0039 195.7544 L285.3906 195.7544 L285.3906 97.3984 L304.0039 97.3984 Lf202.5493 195.7544 m184.3276 195.7544 L184.3276 97.3984 L202.9409 97.3984 L202.9409 150.8857 l202.9409 170.0884 208.0352 174.3994 210.7798 177.1406 c218.6157 184.9795 228.8042 184.3906 y244.479 184.3906 251.3369 175.5742 251.3369 159.3105 c251.3369 97.3984 L269.9473 97.3984 L269.9473 165.3857 l269.9473 196.9292 239.5791 198.6929 232.7236 198.6929 c222.9268 198.6929 209.2104 193.5986 202.9409 181.2544 C202.5493 181.2544 L202.5493 195.7544 Lf148.4539 145.2056 m148.4539 142.853 148.2566 131.2949 144.7317 122.0869 c140.8125 111.8984 130.4294 107.979 122.7878 107.979 c104.9578 107.979 101.0383 120.5171 101.0383 137.564 c101.0383 195.7544 L82.425 195.7544 L82.425 129.9229 l82.425 110.1343 94.1802 94.46 114.7549 94.46 c128.4683 94.46 141.0098 99.5542 148.4539 111.8984 C148.8455 111.8984 L148.8455 97.3984 L167.0674 97.3984 L167.0674 195.7544 L148.4539 195.7544 L148.4539 145.2056 lf*ULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF